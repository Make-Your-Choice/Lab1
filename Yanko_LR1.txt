Для выполнения лабораторной работы с официального сайта был скачан и установлен Git. Была проведена первоначальная настройка  системы контроля версий Git (изменено имя пользователя с помощью команды $git config  -gloal user.name"" и адрес электронной почты с помощью команды $git config  -gloal user.email"", настроены параметры окончания строки командами $git config  -gloal core.autoclrf true и $git config  -gloal core.safeclrf true). После чего был установлен и настроен Ruby. Затем был создан каталог для выполнения лабораторной работы lab1, и инициализирован Git. После редактирования файла с отчетом изменения были проиндексированны и совершен коммит.

Для демострации игнорирования файлов в главном каталоге был моздан файл ign.gitignore, в котром было прописано игнорирование файлов с расширением log, в том же каталоге был создан файл accss.log. С помощью команды $git config  -gloal core.excludesfile ~/.gitignore игнорируются фалы с расширением, указанным в файле ign.gitignore. Проверка игнорирования осуществляется командой $git status  --ignored.

Сравнение производится с помощью команды $git diff, которая позволяет сравнивать файл с последним коммитом.

Удаление файла осуществляет команда $git rm  --cached "", которая переводит заданный файл в неотслеживаемое состояние.

Для перемещения файла был создан новый каталог внутри главного с помощью команды $mkdir moving, в который командой $git mv "" "" был перенесен файл отчета.

Команда $git log отображает историю совершения коммитов, начиная от самого последнего и заканчивая самым давним с параметрами по умолчанию, $git log  -p выводит коммиты вместе с diff-ами для каждого (показывает то, что было изменено), а  $git log  -stat показывает коммиты со статистикой по каждому из них (количество измененных файлов).

Для демонстрации отмены сделанных изменений создадим новый файл undo.txt  с помощью команды $touch "", инициализируем его и совершим новый коммит. Затем, используем команду $git revert HEAD, которая отменит последний коммит, а, соответственно, и внесенные с ним изменения.

Работу с метками осуществляется командой $git tag  -a "", что присваивает последнему коммиту заданную метку. После чего с помощью команды $git show "" можно получить информацию по конкретному коммиту.

Ветку можно создать командой $git chekout  -b "". После этого внесем изменения в отчет и подтвердим их коммитом в побочной ветке. Для перенесения этого коммита в основную ветку используются команды $git chekout master и $git merge "". Последняя команда используется для слияния веток.

Конфликт может появиться в следующем случае: в побочной ветке необходимо изменить файл отчета, потвердить изменения с помощью $git add "" и $git commit  -m "", а потом перейти в гланую ветку и проделать те же действия с этим же файлом. В этом случае при слиянии веток возникнет конфликт, который разрешается путем использования команды  $git add "" в побочной ветке, после чего слияние происходит уже успешно.

Удалить побочную ветку возможно с помощью команды $git branch  -D "".

Команда $git stash save используется для задания имени изменений. А команда $git stash для сокрытия изменений. Для применения сокрытых изменений используется команда $git stash apply (изменения остаются в стеке, а самое последнее из них применяется к файлу), а для просмотра списка всех скрытых изменений используется команда $git stash list. Команда $git stash clear удаляет все скрытые изменения.

После регистрации на сайте Github был создан удаленный репозиторий, в который был скопирован текущий (локальный репозиторий) с помощью команд $git remote set-url origin "" ("" - адрес репозитория на Github) и $git push -u origin master.

Для клонирования репозиторией, выгруженных на Github используются SSH-ключи. Их позволяют создать следующие команды: $ssh-keygen -t rsa -b 4096 -C "some@email.com", $eval $(ssh-agent -s), $ssh-add ~/.ssh/id_rsa и $ssh-add ~/.ssh/id_rsa. После чего будет сгенерирован ключ, который необходимо будет добавить в профиль на Github. Поле этого, можно склонировать репозиторий командой $git clone "" ("" - это адрес репозитория на Github).
