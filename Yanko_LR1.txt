Для выполнения лабораторной работы с официального сайта был скачан и установлен Git. была проведена первоначальная настройка  системы контроля версий Git (изменено имя пользователя с помощью команды $git config  -gloal user.name"" и адрес электронной почты с помощью команды $git config  -gloal user.email"", настроены параметры окончания строки командами $git config  -gloal core.autoclrf true и $git config  -gloal core.safeclrf true). После чего был установлен и настроен Ruby.
Затем был создан каталог для выполнения лабораторной работы lab1, и инициализирован Git. После редактирования файла с отчетом изменения были проиндексированны и совершен коммит.
Для демострации игнорирования файлов в главном каталоге был моздан файл ign.gitignore, в котром было прописано игнорирование файлов с расширением log, в том же каталоге был создан файл accss.log. С помощью команды $git config  -gloal core.excludesfile ~/.gitignore игнорируются фалы с расширением, указанным в файле ign.gitignore. Проверка игнорирования осуществляется командой $git status  --ignored.
Сравнение производится с помощью команды $git diff, которая позволяет сравнивать файл с последним коммитом.
Удаление файла осуществляет команда $git rm  --cached "", которая переводит заданный файл в неотслеживаемое состояние.
Для перемещения файла был создан новый каталог внутри главного с помощью команды $mkdir moving, в который командой $git mv "" "" был перенесен файл отчета.
Команда $git log отображает историю совершения коммитов, начиная от самого последнего и заканчивая самым давним с параметрами по умолчанию, $git log  -p выводит коммиты вместе с diff-ами для каждого (показывает то, что было изменено), а  $git log  -stat показывает коммиты со статистикой по каждому из них (количество измененных файлов).
Для демонстрации отмены сделанных изменений создадим новый файл undo.txt  с помощью команды $touch "", инициализируем его и совершим новый коммит. Затем, используем команду $git revert HEAD, которая отменит последний коммит, а, соответственно, и внесенные с ним изменения.
Работу с метками осуществляется командой $git tag  -a "", что присваивает последнему коммиту заданную метку. После чего с помощью команды $git show "" можно получить информацию по конкретному коммиту.
Ветку можно создать командой $git chekout  -b "". После этого внесем изменения в отчет и подтвердим их коммитом в побочной ветке. Для перенесения этого коммита в основную ветку используются команды $git chekout master и $git merge "". Последняя команда используется для слияния веток.